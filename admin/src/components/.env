// admin pannel
// Updated Product Schema with description
const Product = mongoose.model('Product', {
    id: {
        type: Number,
        required: true,
        unique: true
    },
    name: {
        type: String,
        required: true
    },
    description: {
        type: String,
        required: true,
        default: "No description available" // Fallback description
    },
    category: {
        type: String,
        required: true
    },
    image: {
        type: String,
        required: true
    },
    new_price: {
        type: Number,
        required: true
    },
    old_price: {
        type: Number,
        required: true
    },
    date: {
        type: Date,
        default: Date.now
    },
    available: {
        type: Boolean,
        default: true
    }
});

// Middleware to verify admin
const verifyAdmin = async (req, res, next) => {
    try {
        const token = req.header('auth-token');
        if (!token) {
            return res.status(401).json({ success: false, errors: "Access Denied" });
        }

        const data = jwt.verify(token, 'secret_ecom');
        const user = await Users.findById(data.user.id);
        
        if (!user || user.email !== 'admin@example.com') {
            return res.status(403).json({ success: false, errors: "Admin access required" });
        }

        req.user = data.user;
        next();
    } catch (error) {
        res.status(401).json({ success: false, errors: "Invalid token" });
    }
};

// Updated Add Product endpoint with description
app.post('/admin/add-product', verifyAdmin, upload.single('product'), async (req, res) => {
    try {
        const { name, category, new_price, old_price, description } = req.body;
        
        // Get the last product to determine the next ID
        const lastProduct = await Product.findOne().sort({ id: -1 });
        const nextId = lastProduct ? lastProduct.id + 1 : 1;

        const product = new Product({
            id: nextId,
            name,
            description: description || "No description available", // Include description with fallback
            category,
            image: req.file ? `http://localhost:${port}/images/${req.file.filename}` : '',
            new_price: Number(new_price),
            old_price: Number(old_price)
        });

        await product.save();
        res.json({ success: true, product });

    } catch (error) {
        console.error('Add product error:', error);
        res.status(500).json({ success: false, errors: "Internal server error" });
    }
});

// Updated Update Product endpoint with description
app.put('/admin/update-product/:id', verifyAdmin, upload.single('product'), async (req, res) => {
    try {
        const { name, category, new_price, old_price, description } = req.body;
        const updateData = {
            name,
            category,
            description: description || "No description available", // Include description with fallback
            new_price: Number(new_price),
            old_price: Number(old_price)
        };

        if (req.file) {
            updateData.image = `http://localhost:${port}/images/${req.file.filename}`;
        }

        const product = await Product.findOneAndUpdate(
            { id: req.params.id },
            updateData,
            { new: true }
        );

        if (!product) {
            return res.status(404).json({ success: false, errors: "Product not found" });
        }

        res.json({ success: true, product });
    } catch (error) {
        res.status(500).json({ success: false, errors: "Internal server error" });
    }
});

// Get single product with description
app.get('/admin/product/:id', verifyAdmin, async (req, res) => {
    try {
        const product = await Product.findOne({ id: req.params.id });
        if (!product) {
            return res.status(404).json({ success: false, errors: "Product not found" });
        }
        res.json({ success: true, product });
    } catch (error) {
        res.status(500).json({ success: false, errors: "Internal server error" });
    }
});

// Get all products (remains the same but now includes description)
app.get('/admin/all-products', verifyAdmin, async (req, res) => {
    try {
        const products = await Product.find().sort({ date: -1 });
        res.json({ success: true, products });
    } catch (error) {
        res.status(500).json({ success: false, errors: "Internal server error" });
    }
});

// Delete product (remains the same)
app.delete('/admin/delete-product/:id', verifyAdmin, async (req, res) => {
    try {
        const product = await Product.findOneAndDelete({ id: req.params.id });
        if (!product) {
            return res.status(404).json({ success: false, errors: "Product not found" });
        }
        res.json({ success: true, message: "Product deleted successfully" });
    } catch (error) {
        res.status(500).json({ success: false, errors: "Internal server error" });
    }
});

// Get product statistics (updated to include description length stats)
app.get('/admin/statistics', verifyAdmin, async (req, res) => {
    try {
        const totalUsers = await Users.countDocuments();
        const totalProducts = await Product.countDocuments();
        const recentUsers = await Users.find()
            .sort({ date: -1 })
            .limit(5)
            .select('name email date');

        // Enhanced category stats with description analysis
        const categoryStats = await Product.aggregate([
            {
                $group: {
                    _id: "$category",
                    count: { $sum: 1 },
                    totalValue: { $sum: "$new_price" },
                    avgDescriptionLength: { 
                        $avg: { $strLenCP: "$description" } 
                    }
                }
            }
        ]);

        res.json({
            success: true,
            statistics: {
                totalUsers,
                totalProducts,
                recentUsers,
                categoryStats
            }
        });
    } catch (error) {
        res.status(500).json({ success: false, errors: "Internal server error" });
    }
});



/// admin authontication
// Admin login endpoint
app.post('/admin/login', async (req, res) => {
    try {
        const { email, password } = req.body;
        
        // Replace these with your actual admin credentials
        // In production, these should be stored securely
        const ADMIN_EMAIL = 'admin@example.com';
        const ADMIN_PASSWORD = 'admin123';

        if (email === ADMIN_EMAIL && password === ADMIN_PASSWORD) {
            const data = {
                user: {
                    id: 'admin',
                    isAdmin: true
                }
            };
            const token = jwt.sign(data, 'secret_ecom');
            res.json({ success: true, token });
        } else {
            res.status(401).json({ success: false, errors: "Invalid admin credentials" });
        }
    } catch (error) {
        res.status(500).json({ success: false, errors: "Internal server error" });
    }
});